name: Build and Deploy Serverless

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  java_build:
    name: Build Jar
    runs-on: ubuntu-latest
    steps:
      - name: Get Version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - uses: actions/checkout@v2
      - name: Build Project
        run: ./gradlew clean build --refresh-dependencies
      - name: build jar
        run: ./gradlew installDist
  docker_build:
    name: Push to GitHub Docker Package Registry
    needs: java_build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Version
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo "VERSION=$VERSION" >> $GITHUB_ENV

          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ matrix.project }}

          DOCKER_TAGS=$IMAGE_ID:$VERSION

          PRERELEASE=${{ github.event.release.prerelease }}
          echo PRERELEASE=$PRERELEASE

          if [ "$PRERELEASE" == "false" ]; then
              DOCKER_TAGS=$DOCKER_TAGS,$IMAGE_ID:latest
          fi

          echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: aggregate-serice
          path: aggregate-service/build/libs
      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: aggregate-service/Dockerfile
          push: true
          tags: ${{ env.DOCKER_TAGS }}
  deploy:
    name: Deploy Serverless AWS environment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: serverless deploy
        uses: serverless/github-action@v1
        with:
          args: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_TOKEN }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_TOKEN }}
          SLS_DEBUG: 1
